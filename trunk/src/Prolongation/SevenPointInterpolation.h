/** \file SevenPointInterpolation.h
 * \author Benedikt Engbroks
 * \brief Contains the interface of the class SevenPointInterpolation
 * 
 * This file contains the interface of SevenPointInterpolation. The
 * implementation is in SevenPointInterpolation.cpp
 */
#ifndef SEVENPOINTINTERPOLATION_H_
#define SEVENPOINTINTERPOLATION_H_

#include "Prolongation.h"

namespace mg
{

/**
 * \brief SevenPointInterpolation is a 2D Prolongation Operator
 * 
 * SevenPointInterpolation represents a 2D Prolongation Operator that uses
 * 7-point interpolation to do its job.
 */
class SevenPointInterpolation : public Prolongation
{
private:
    const NumericArray i_;
    const PositionArray jx_;
    const PositionArray jy_;

    //initialize i_, makes it possible to make i_ const
    NumericArray initI_() const
    {
        const Precision t[] = {
            1.0,   1.0/2, 1.0/2,
            1.0/2, 1.0/2, 1.0/2,
            0.0,   1.0/2, 0.0};
        return NumericArray(t,9);
    }

    //initialize jx_, makes it possible to make jx_ const
    PositionArray initJx_() const
    {
        const int t[] = {
            0,-1, 0,
            1, 0,-1,
            1, 1,-1};
        return PositionArray(t,9);
    }

    //initialize jy_, makes it possible to make jy_ const
    PositionArray initJy_() const
    {
        const int t[] = {
            0, 0, 1,
            0,-1, 1,
            1,-1,-1};
        return PositionArray(t,9);
    }

    //we don't want the autogenerated copy constructor and assignment operator
    SevenPointInterpolation(const SevenPointInterpolation&);
    SevenPointInterpolation& operator=(const SevenPointInterpolation&);
public:
    SevenPointInterpolation()
        : i_(initI_()), jx_(initJx_()), jy_(initJy_()) {}

    virtual ~SevenPointInterpolation() {}

    /**
     * \brief prolongate does a bicubic interpolation on the input vector
     * 
     * \param u     the vector representing a rectangel to prolongate
     * \param nx    Number of steps in x direction
     * \param ny    Number of steps in y direction
     * \return      a vector representing the prolongated rectangel of 
     *              size 2*(nx+1)*2*(ny+1)
     */
    NumericArray prolongate(
        const NumericArray& u,
        const Stencil& stencil,
        const size_t nx,
        const size_t ny) const;

    const NumericArray& get_I(
        const size_t,
        const size_t,
        const size_t,
        const size_t,
        const Stencil&) const
    {
        return i_;  
    }

    const PositionArray& getJx() const
    {
        return jx_; 
    }

    const PositionArray& getJy() const
    {
        return jy_;
    }
};

}

#endif /*SEVENPOINTINTERPOLATION_H_*/
