/** \file DendyInterpolation.h
 * \author Benedikt Engbroks
 * \brief Contains the interface of the class DendyInterpolation
 * 
 * This file contains the interface of DendyInterpolation. The
 * implementation is in DendyInterpolation.cpp
 * \todo This file needs cleanup
 */
 
#ifndef DENDY_INTERPOLATION_H_
#define DENDY_INTERPOLATION_H_

#include "Prolongation.h"
#include "../general/parameters.h"
#include "../Stencil/Stencil.h"

namespace mg
{

/**
 * \brief DendyInterpolation is a matrix-dependent 2D Prolongation Operator
 * 
 * DendyInterpolation represents a 2D Prolongation Operator that uses
 * matrix-dependent interpolation by Dendy to do its job.
 */
class DendyInterpolation : public mg::Prolongation
{
private:
    NumericArray t_;
    const PositionArray jx_;
    const PositionArray jy_;

    //initialize jx_, makes it possible to make jx_ const
    PositionArray initJx_() const
    {
        const int t[]={0,-1,0,1,0,-1,1,1,-1};
        return PositionArray(t,9);
    }

    //initialize jy_, makes it possible to make jy_ const
    PositionArray initJy_() const
    {
        const int t[]={0,0,1,0,-1,1,1,-1,-1};
        return PositionArray(t,9);
    }

    //we don't want the autogenerated copy constructor and assignment operator
    DendyInterpolation(const DendyInterpolation& rhs);
    DendyInterpolation& operator=(const DendyInterpolation& rhs);

public:                                                              
    DendyInterpolation() : t_(9), jx_(initJx_()), jy_(initJy_()) {}

    virtual ~DendyInterpolation() {}

    /**
     * \brief prolongate does a matrix-dependent interpolation on the input
     *        vector
     * 
     * \param[in] u         the vector representing a rectangel to prolongate
     * \param[in] stencil   the stencil rep. of the pde
     * \param[in] nx        Number of steps in x direction
     * \param[in] ny        Number of steps in y direction
     * \return              a vector representing the prolongated rectangle of 
     *                      size 2*(nx+1)*2*(ny+1)
     */
    NumericArray prolongate(
        const NumericArray& u,
        const Stencil& stencil, 
        const Index nx,
        const Index ny) const;
                                    
    const NumericArray& getI(
        const Index sx,
        const Index sy, 
        const Index nx,
        const Index ny,
        const Stencil& stencil);

    const PositionArray& getJx() const
    {
        return jx_; 
    }

    const PositionArray& getJy() const
    {
        return jy_;
    }
};

}

#endif /*DENDY_INTERPOLATION_H_*/
