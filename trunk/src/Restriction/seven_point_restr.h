/** \file seven_point_restr.h
 * \author Mareike Riepl, Michaela Anghel, Daniela Steffes-Lai
 * \brief Contains the interface of the class seven_point_restr
 * \see Restriction.h
 */
#ifndef SEVEN_POINT_RESTR_H_
#define SEVEN_POINT_RESTR_H_

#include "Restriction.h"
 
namespace mg
{

/**
 * \brief seven point restriction is a 2D restriction operator
 * 
 * Seven point restriction is a representation of a 2D restriction operator that uses
 * seven point restriction to do its job.
 */
class seven_point_restr : public mg::Restriction
{
private:
	const Precision weight_;
	const std::valarray<Precision> I;
	const std::valarray<int> J_x;
	const std::valarray<int> J_y;
	//initilize I, makes it possible to make I const
	std::valarray<Precision> init_I(Precision weight) const
	{
		const Precision t[] = {weight/4,weight/8,weight/8,weight/8,weight/8,
									weight/8,0,weight/8,0};
		return std::valarray<Precision>(t,9);
	}
	//initilize J_x, makes it possible to make J_x const
	std::valarray<int> init_J_x() const
	{
		const int t[] = {0,-1,0,1,0,-1,1,1,-1};
		return std::valarray<int>(t,9);
	}
	//initilize J_y, makes it possible to make J_y const
	std::valarray<int> init_J_y() const
	{
		const int t[] = {0,0,1,0,-1,1,1,-1,-1};
		return std::valarray<int>(t,9);
	}
	//we don't want these autogenerated contors and operators
	seven_point_restr(const seven_point_restr& rhs);
	seven_point_restr& operator=(const seven_point_restr& rhs);
public:
	/**
	 * \brief The constructor of a seven_point_restr object
	 * 
	 * seven_point_restr constructs a seven_point_restr object with:
	 * \param[in] weight	the weight to do the restriction with (default 1.0)
	 */
	seven_point_restr(Precision weight = 1.0)
		: weight_(weight),I(init_I(weight)), J_x(init_J_x()), J_y(init_J_y()) {}
	virtual ~seven_point_restr(){}
	/**
	 * \brief restriction() restricts the given vector to a smaller grid
	 * 
	 * restriction() restricts the given vector which represents a rectangular
	 * grid to a smaller grid with the double step size with the seven Point
	 * restriction Operator.
	 * 
	 * \param[in] u					the vector to restrict
	 * \param[in] stencil			the stencil rep. of the pde needed
	 * 								for matrix dep. Restrictions (not used)
	 * \param[in] prolongate			Prolongation used, needed for matrix dep.
	 * 								Restrictions (not used)
	 * \param[in] Nx				number of steps in x direction
	 * \param[in] Ny				number of steps in y direction
	 * \throw std::domain_error		if Nx or Ny is not divedable by 2
	 * \return						a vector with the values on the restricted
	 * 								grid
	 */
	std::valarray<Precision> restriction(const std::valarray<Precision>& u,
					const Stencil& stencil,
					const Prolongation& prolong,
					const size_t Nx, const size_t Ny) const;
	const std::valarray<Precision>& get_I(const size_t, const size_t,
									const size_t, const size_t, const Stencil&) const
	{
		return I;	
	}
	const std::valarray<int>& get_J_x() const
	{
		return J_x;	
	}
	const std::valarray<int>& get_J_y() const
	{
		return J_y;
	}
};

}

#endif /*SEVEN-POINT_RESTR_H_*/
