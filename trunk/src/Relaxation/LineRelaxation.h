/** \file LineRelaxation.h
 * \author <a href="mailto:mail@jirikraus.de">Jiri Kraus</a>
 * \brief LineRelaxation.h contains the interface of the class LineRelaxation.
 * \see Relaxation.h
 */
#ifndef LINERELAXATION_H_
#define LINERELAXATION_H_


#include "Relaxation.h"

namespace mg
{
/**
 * \brief LineRelaxation is an abstract class for generale line relaxations
 */
class LineRelaxation : public mg::Relaxation
{
protected:
    const Direction direction_;

    void xLRSolver(
        NumericArray& solveInto,
        const Index sy,
        const Index nx,
        const Index /*ny*/,
        NumericArray& rhs,
        NumericArray& leftDiagonal,
        NumericArray& mainDiagonal,
        const NumericArray& rightDiagonal) const;

    void yLRSolver(
        NumericArray& u,
        const Index sx,
        const Index nx,
        const Index ny,
        NumericArray& rhs,
        NumericArray& ndiagL,
        NumericArray& diagR,
        const NumericArray& ndiagR) const;

    void xLRSolver(
        NumericArray& u,
        const Index sy,
        const Index nx,
        const Index /*ny*/,
        NumericArray& rhs,
        NumericArray& ndiagL1,
        NumericArray& ndiagL2,
        NumericArray& diagR,
        NumericArray& ndiagR1,
        const NumericArray& ndiagR2) const;

    void yLRSolver(
        NumericArray& u,
        const Index sx,
        const Index nx,
        const Index ny,
        NumericArray& rhs,
        NumericArray& ndiagL1,
        NumericArray& ndiagL2,
        NumericArray& diagR,
        NumericArray& ndiagR1,
        const NumericArray& ndiagR2) const;

    virtual void ninePointX(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index ny) const =0;

    virtual void ninePointY(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index ny) const =0;

    virtual void fullX(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index ny) const =0;

    virtual void fullY(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index ny) const =0;

    void solveNinePointXLine(
        NumericArray &u,
        const NumericArray &f,
        NumericArray &solveInto,
        const Stencil &stencil,
        const Index nx,
        const Index ny,
        const Index,
        const Index sy,
        const Position east=E,
        const Position center=C,
        const Position west=W) const;

    void solveNinePointYLine(
        NumericArray &u,
        const NumericArray &f,
        NumericArray &solveInto,
        const Stencil &stencil,
        const Index nx,
        const Index ny,
        const Index sx,
        const Index,
        const Position south=S,
        const Position center=C,
        const Position north=N) const;

    void solveFullXLine(
        NumericArray &u,
        const NumericArray &f,
        NumericArray &solveInto,
        const Stencil &stencil,
        const Index nx,
        const Index ny,
        const Index,
        const Index sy,
        const Position west=W,
        const Position center=C,
        const Position east=E) const;

    void solveFullYLine(
        NumericArray &u,
        const NumericArray &f,
        NumericArray &solveInto,
        const Stencil &stencil,
        const Index nx,
        const Index ny,
        const Index sx,
        const Index,
        const Position south=S,
        const Position center=C,
        const Position north=N) const;
public:
    /**
     * \brief The constructor of a LineRelaxation object
     * 
     * LineRelaxation constructs a LineRelaxation object with:
     * \param[in] direction             direction of the line relaxation
     *                                  (def. alternating directions)
     * \see Direction
     */ 
    LineRelaxation(const Direction direction=ALTDIR):direction_(direction) {}
private:
    //we don't want the autogenerated copy constructor and assignment operator
    LineRelaxation(const LineRelaxation&);
    LineRelaxation& operator=(const LineRelaxation&);

    /**
     * \brief relax() executes one relaxation step on the input vector
     * 
     * relax() exectues one Jacobi line relaxation step on the 
     * input vector on a rectangular 2D gird with lexicographic ordering and the
     * discretazation Stencil for a pde
     * 
     * \param[in,out] u     the vector representation of the 2D grid to perform
     *                      the relaxation on
     * \param[in] f         the right hand side of the pde
     * \param[in] stencil   the stencil rep. of the pde
     * \param[in] nx        number of steps in x direction
     * \param[in] ny        number of steps in y direction
     */
    void relax(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx,
        const Index ny) const; 
};

}
#endif /*LINERELAXATION_H_*/
