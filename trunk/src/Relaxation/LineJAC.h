/** \file LineJAC.h
 * \author Andre Oeckerath
 * \brief LineJAC.h contains the interface of the class LineJAC.
 * \see LineRelaxation.h
 */
#ifndef LINEJAC_H_
#define LINEJAC_H_

#include "LineRelaxation.h"
#include "Jacobi.h"

namespace mg
{
/**
 * \brief LineJAC is a class for a Jacobi line relaxation
 */
class LineJAC : public mg::LineRelaxation
{
private:
    const Precision omega_;
    const Jacobi jacobi_;

    void ninePointX(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index ny) const;

    void ninePointY(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index ny) const;

    void fullX(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index ny) const;

    void fullY(
        NumericArray &u,
        const NumericArray &f, 
        const Stencil &stencil,
        const Index nx, 
        const Index Ny) const;

    //we don't want the autogenerated copy constructor and assignment operator
    LineJAC(const LineJAC&);
    LineJAC& operator=(const LineJAC&);
public:
    /**
     * \brief The constructor of a LineJAC object
     * 
     * LineJAC constructs a LineJAC object with:
     * \param[in] direction             direction of the line relaxation
     *                                  (def. alternating directions)
     * \param[in] omega                 relaxation parameter (def. 1.0)
     * \see Direction
     */ 
    LineJAC(
        const Direction direction =ALTDIR,
        const Precision omega =1.0)
        : LineRelaxation(direction),
          omega_(omega), jacobi_(omega) {}
    virtual ~LineJAC() {}
    
};

}

#endif /*LINEJAC_H_*/
