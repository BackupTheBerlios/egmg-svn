<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML v4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article>
<sect1><title>Namensgebung</title>
<para>
Die Projektsprache im Quelltext ist Englisch.
</para>
<sect2><title>Dateien</title>
<para>
Dateinnamen enthalten nur kleinbuchstaben und heißen wie die Klasse bzw. Funktion die sie enthalten.
Für jede Klasse und jede Funktion wird eine Headerdatei <filename class="headerfile">*.h</filename> mit dem Deklaration und inline Implementierungen, sowie eine Implementierungsdatei <filename>*.cpp</filename>.
</para>
</sect2>
<sect2><title>Namespace</title>
<para>
Wir benutzen den Namespace mg, d.h. alles was wir implementierun steht in
<programlisting>
<![CDATA[
namespace mg
{
}
]]>
</programlisting>
</para>
</sect2>
<sect2><title>#define</title>
<para>
In einem #define verwenden wir nur GROSSBUCHSTABEN_MIT_UNTERSTRICHEN.
</para>
<sect3><title>Headerdatei include guard</title>
<para>
Eine Headerdatei wird umramt von
<programlisting>
<![CDATA[
#ifndef NAMEDERHEADERDATEI_H_
#define NAMEDERHEADERDATEI_H_
...
#endif //NAMEDERHEADERDATEI_H_
]]>
</programlisting>
</para>
</sect3>
</sect2>
<sect2><title>typedefs</title>
<para>
Wir behandeln Typedefs wie Klassennamen.
</para>
</sect2>
<sect2><title>Variablen</title>
<para>
Variablen beginnen mit einem kleinbuchstaben und enthalten kein &quot;_&quot;, falls ein neues Wort beginnt, verwenden wir die sogenannte CamelCaseNotation.
<programlisting>
<![CDATA[
std::valarray<Precision> coarsGridCorrection;
]]>
</programlisting>
</para>
</sect2>
<sect2><title>Klassen</title>
<para>
Klassennamen beginen mit einem Großbuchstaben und verwenden wie Variablen die CamelCaseNotation.
</para>
</sect2>
<sect2><title>Membervariablen</title>
<para>
Membervariablen werden wie Variablen behandelnt und enden mit einem Unterstrich.
<programlisting>
int omega_;
</programlisting>
</para>
</sect2>
	<sect2><title>Funktionen / Memberfunktionen</title>
	<para>
	Funktionen werden wie Variablen benannt.
	</para>
	</sect2>
</sect1>
<sect1><title>Formatierung</title>
<sect2><title>Klammern</title>
<para>
Geschweifte Klammern gehören untereinander und in eine Eigene Zeile. Falls ein Codeblock nur eine Anweisung enthält lassen wir die geschweiften Klammern weg. Rundeklammern verwenden wir sowenig wie möglich.
<programlisting>
<![CDATA[
if (a<3 && c+d<7)
]]>
</programlisting>
</para>
</sect2>
<sect2><title>Einrücken</title>
<para>
Codeblöcke werden mit 4 Leerzeichen eingerückt, wir verwenden keine Tabulatoren. Die geschweiften Klammern werden nicht mit eingerückt.
<programlisting>
<![CDATA[
for (size_t i=0; i<u.size(); ++i)
{
    u[i]+=i;
    u[i]-=i;
}
]]>
</programlisting>
</para>
</sect2>
<sect2><title>Leerzeichen</title>
<para>
</para>
</sect2>
<sect2><title>Zeilenlänge</title>
<para>
</para>
</sect2>
<sect2><title>Kommentare</title>
<para>
</para>
</sect2>
<sect2><title>Funktionsdeklarationen/-definitionen</title>
<para>
</para>
</sect2>
</sect1>
<sect1><title>Formulierung</title>
<sect2><title>Operatoren</title>
<para>
</para>
</sect2>
<sect2><title>Keine public member Variablen</title>
<para>
</para>
</sect2>
</sect1>
</article>
