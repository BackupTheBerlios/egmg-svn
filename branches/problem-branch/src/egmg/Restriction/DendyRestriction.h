/** \file DendyRestriction.h
 * \author <a href="mailto:mail@jirikraus.de">Jiri Kraus</a>
 * \brief Contains the interface of the class DendyRestriction.
 */
#ifndef DENDYRESTRICTION_H_
#define DENDYRESTRICTION_H_

#include "Restriction.h"
 
namespace mg
{

/**
 * \brief DendyRestriction is a 2D restriction operator
 * 
 * DendyRestriction is a representation of a 2D restriction operator that uses
 * Dendy's matrix dependent restriction to do its job.
 */
class DendyRestriction : public mg::Restriction
{
private:
    const Precision weight_;
    mutable NumericArray t_;
    const PositionArray jx_;
    const PositionArray jy_;
    //initilize jx_, makes it possible to make jx_ const
    PositionArray initJX_() const
    {
        const int t[]={0,-1,0,1,0,-1,1,1,-1};
        return PositionArray(t,9);
    }
    //initilize jy_, makes it possible to make jy_ const
    PositionArray initJY_() const
    {
        const int t[]={0,0,1,0,-1,1,1,-1,-1};
        return PositionArray(t,9);
    }
    //we don't want these autogenerated ctors and operators
    DendyRestriction(const DendyRestriction& rhs);
    DendyRestriction& operator=(const DendyRestriction& rhs);
public:
    /**
     * \brief The constructor of a DendyRestriction object
     * 
     * DendyRestriction constructs a DendyRestriction object with:
     * \param[in] weight    the weight to do Dendy's restriction with (default 1.0)
     */
    DendyRestriction(Precision weight = 1.0)
        : weight_(weight), jx_(initJX_()), jy_(initJY_()) {}

    virtual ~DendyRestriction(){}
    
    /**
     * \brief restriction() restricts the given vector to a smaller grid
     * 
     * restriction() restricts the given vector which represents a rectangular
     * grid to a smaller grid with the double step size with Dendy's restriction
     * Operator.
     * 
     * \param[in] u                 the vector to restrict
     * \param[in] stencil           the stencil rep. of the pde needed
     *                              for matrix dep. Restrictions (not used)
     * \param[in] prolongate        Prolongation used, needed for matrix dep.
     *                              Restrictions (not used)
     * \param[in] nx                number of steps in x direction
     * \param[in] ny                number of steps in y direction
     * \throw std::domain_error     if nx or ny is not divedable by 2
     * \return                      a vector with the values on the restricted
     *                              grid
     */
    NumericArray restriction(
        const NumericArray& u,
        const Stencil& stencil,
        const Index nx, const Index ny) const;
        
    const NumericArray& getI(
        const Position,
        const Index,
        const Index,
        const Index,
        const Index,
        const Stencil&) const;
    
    const PositionArray& getJx( const Position ) const
    {
        return jx_; 
    }
    
    const PositionArray& getJy( const Position ) const
    {
        return jy_;
    }
};

}

#endif /*DENDYRESTRICTION_H_*/
